{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useState, useEffect, useRef \} from 'react';\
\
// Main App component for the Copper Ore Export Dashboard\
function App() \{\
  // State variables for input fields\
  const [oreWeight, setOreWeight] = useState(''); // Copper Ore Weight (tons)\
  const [goldPerTon, setGoldPerTon] = useState(''); // Gold Content (g/ton)\
  const [silverPerTon, setSilverPerTon] = useState(''); // Silver Content (g/ton)\
  const [humidity, setHumidity] = useState(''); // Humidity Content (%)\
  const [copperContent, setCopperContent] = useState(''); // Copper Content (%)\
  const [refineryChargeRC, setRefineryChargeRC] = useState(''); // Refinery Charge RC (per ton)\
  const [refineryChargeTC, setRefineryChargeTC] = useState(''); // Refinery Charge TC (per ton)\
  const [lmePercentage, setLmePercentage] = useState('96.25'); // LME Percentage for selling, default 96.25%\
  const [goldPayablePercentage, setGoldPayablePercentage] = useState('80'); // New: Gold Payable Percentage\
  const [silverPayablePercentage, setSilverPayablePercentage] = useState('80'); // New: Silver Payable Percentage\
\
  // State variables for live market prices (placeholders for demonstration)\
  const [liveLMECopperPrice, setLiveLMECopperPrice] = useState(0);\
  const [liveGoldPrice, setLiveGoldPrice] = useState(0);\
  const [liveSilverPrice, setLiveSilverPrice] = useState(0);\
\
  // State variables for custom prices\
  const [useCustomPrices, setUseCustomPrices] = useState(false);\
  const [customCopperPrice, setCustomCopperPrice] = useState('');\
  const [customGoldPrice, setCustomGoldPrice] = useState('');\
  const [customSilverPrice, setCustomSilverPrice] = useState('');\
\
  // State variables for calculated results\
  const [dryMetricTon, setDryMetricTon] = useState(0);\
  const [totalGold, setTotalGold] = useState(0);\
  const [totalSilver, setTotalSilver] = useState(0);\
  const [totalCopper, setTotalCopper] = useState(0);\
  const [totalRefineryCharges, setTotalRefineryCharges] = useState(0);\
  const [estimatedCopperValue, setEstimatedCopperValue] = useState(0);\
  const [estimatedGoldValue, setEstimatedGoldValue] = useState(0);\
  const [estimatedSilverValue, setEstimatedSilverValue] = useState(0);\
  const [totalExportValue, setTotalExportValue] = useState(0);\
\
  // State variable for Excel loading\
  const [isGeneratingExcel, setIsGeneratingExcel] = useState(false);\
\
  // useEffect hook to dynamically load XLSX via CDN\
  useEffect(() => \{\
    const loadScript = (id, src, callback) => \{\
      if (document.getElementById(id)) \{\
        if (callback) callback();\
        return;\
      \}\
      const script = document.createElement('script');\
      script.src = src;\
      script.id = id;\
      script.onload = () => \{\
        if (callback) callback();\
      \};\
      script.onerror = () => \{\
        console.error(`Failed to load script: $\{src\}`);\
        // Optionally, inform the user if a critical library fails to load\
      \};\
      document.head.appendChild(script);\
    \};\
\
    // Load XLSX\
    loadScript('xlsx-cdn', '[https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js](https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js)', () => \{\
      console.log('XLSX loaded');\
    \});\
  \}, []); // Run once on component mount\
\
  // useEffect hook to fetch live prices and simulate LME copper price\
  useEffect(() => \{\
    // IMPORTANT: For a real application, you would need to replace this with your actual API key\
    // You can get a free API key from [https://metals-api.com/](https://metals-api.com/)\
    const API_KEY = ''; // Replace with your Metals-API key\
\
    // Simulate LME Copper Price (as direct free API from LME is not readily available)\
    setLiveLMECopperPrice(9850); // Example LME Copper Price per ton (placeholder)\
\
    // Fetch Gold and Silver prices from Metals-API\
    const fetchMetalPrices = async () => \{\
      if (!API_KEY) \{\
        console.warn("Metals-API key is missing. Gold and Silver prices will be static placeholders.");\
        setLiveGoldPrice(2350); // Placeholder if API key is missing\
        setLiveSilverPrice(30);  // Placeholder if API key is missing\
        return;\
      \}\
\
      try \{\
        const response = await fetch(`https://api.metals-api.com/api/latest?access_key=$\{API_KEY\}&symbols=XAU,XAG&base=USD`);\
        const data = await response.json();\
\
        if (data.success) \{\
          // Metals-API returns rates relative to the base currency (USD).\
          // To get price per unit (troy ounce for Gold/Silver), we use 1 / rate.\
          setLiveGoldPrice(1 / data.rates.XAU); // Price of 1 troy ounce of Gold in USD\
          setLiveSilverPrice(1 / data.rates.XAG); // Price of 1 troy ounce of Silver in USD\
        \} else \{\
          console.error("Error fetching metal prices:", data.error.info);\
          setLiveGoldPrice(2350); // Fallback to placeholder on API error\
          setLiveSilverPrice(30);  // Fallback to placeholder on API error\
        \}\
      \} catch (error) \{\
        console.error("Network error fetching metal prices:", error);\
        setLiveGoldPrice(2350); // Fallback to placeholder on network error\
        setLiveSilverPrice(30);  // Fallback to placeholder on network error\
      \}\
    \};\
\
    fetchMetalPrices();\
\
    // You might want to set up an interval to refresh prices periodically in a real app\
    // const intervalId = setInterval(fetchMetalPrices, 3600000); // Refresh every hour (adjust based on API limits)\
    // return () => clearInterval(intervalId); // Cleanup on unmount\
  \}, []); // Empty dependency array means this runs once on mount\
\
  // useEffect hook to recalculate values whenever input states or prices change\
  useEffect(() => \{\
    // Parse input values, defaulting to 0 if empty or invalid\
    const weight = parseFloat(oreWeight) || 0;\
    const gold = parseFloat(goldPerTon) || 0;\
    const silver = parseFloat(silverPerTon) || 0;\
    const hum = parseFloat(humidity) || 0;\
    const copper = parseFloat(copperContent) || 0;\
    const rc = parseFloat(refineryChargeRC) || 0;\
    const tc = parseFloat(refineryChargeTC) || 0;\
    const lmePerc = parseFloat(lmePercentage) || 0;\
    const goldPayablePerc = parseFloat(goldPayablePercentage) || 0; // Parse new Gold Payable Percentage\
    const silverPayablePerc = parseFloat(silverPayablePercentage) || 0; // Parse new Silver Payable Percentage\
\
    // Determine which prices to use for calculations\
    const currentCopperPrice = useCustomPrices && parseFloat(customCopperPrice) > 0 ? parseFloat(customCopperPrice) : liveLMECopperPrice;\
    const currentGoldPrice = useCustomPrices && parseFloat(customGoldPrice) > 0 ? parseFloat(customGoldPrice) : liveGoldPrice;\
    const currentSilverPrice = useCustomPrices && parseFloat(customSilverPrice) > 0 ? parseFloat(customSilverPrice) : liveSilverPrice;\
\
    // Calculate Dry Metric Ton (DMT)\
    // DMT = Ore Weight * (1 - Humidity / 100)\
    const calculatedDMT = weight * (1 - hum / 100);\
    setDryMetricTon(calculatedDMT);\
\
    // Calculate total gold content\
    // Total Gold = DMT * Gold Content (g/ton)\
    const calculatedTotalGold = calculatedDMT * gold;\
    setTotalGold(calculatedTotalGold);\
\
    // Calculate total silver content\
    // Total Silver = DMT * Silver Content (g/ton)\
    const calculatedTotalSilver = calculatedDMT * silver;\
    setTotalSilver(calculatedTotalSilver);\
\
    // Calculate total copper content (in tons)\
    // Total Copper = DMT * Copper Content (%) / 100\
    const calculatedTotalCopper = calculatedDMT * (copper / 100);\
    setTotalCopper(calculatedTotalCopper);\
\
    // Calculate total refinery charges\
    // Total Refinery Charges = DMT * (RC + TC)\
    const calculatedTotalRefineryCharges = calculatedDMT * (rc + tc);\
    setTotalRefineryCharges(calculatedTotalRefineryCharges);\
\
    // Calculate estimated copper value based on LME price and percentage\
    // Estimated Copper Value = Total Copper (tons) * Current Copper Price (<span class="math-inline">/ton\\) \\* \\(LME Percentage / 100\\)\
const calculatedEstimatedCopperValue \\= calculatedTotalCopper \\* currentCopperPrice \\* \\(lmePerc / 100\\);\
setEstimatedCopperValue\\(calculatedEstimatedCopperValue\\);\
// Calculate estimated gold value \\(assuming 1 gram \\= 0\\.0321507 troy ounces\\)\
// Estimated Gold Value \\= Total Gold \\(grams\\) \\* \\(1 troy ounce / 31\\.1035 grams\\) \\* Current Gold Price \\* \\(Gold Payable Percentage / 100\\)\
const calculatedEstimatedGoldValue \\= calculatedTotalGold \\* \\(1 / 31\\.1035\\) \\* currentGoldPrice \\* \\(goldPayablePerc / 100\\);\
setEstimatedGoldValue\\(calculatedEstimatedGoldValue\\);\
// Calculate estimated silver value \\(assuming 1 gram \\= 0\\.0321507 troy ounces\\)\
// Estimated Silver Value \\= Total Silver \\(grams\\) \\* \\(1 troy ounce / 31\\.1035 grams\\) \\* Current Silver Price \\* \\(Silver Payable Percentage / 100\\)\
const calculatedEstimatedSilverValue \\= calculatedTotalSilver \\* \\(1 / 31\\.1035\\) \\* currentSilverPrice \\* \\(silverPayablePerc / 100\\);\
setEstimatedSilverValue\\(calculatedEstimatedSilverValue\\);\
// Calculate Total Export Value\
const calculatedTotalExportValue \\= calculatedEstimatedCopperValue \\+ calculatedEstimatedGoldValue \\+ calculatedEstimatedSilverValue;\
setTotalExportValue\\(calculatedTotalExportValue\\);\
\\\}, \\[oreWeight, goldPerTon, silverPerTon, humidity, copperContent, refineryChargeRC, refineryChargeTC, lmePercentage, goldPayablePercentage, silverPayablePercentage, liveLMECopperPrice, liveGoldPrice, liveSilverPrice, useCustomPrices, customCopperPrice, customGoldPrice, customSilverPrice\\]\\);\
// Function to handle clearing all input fields and results\
const handleClear \\= \\(\\) \\=\\> \\\{\
setOreWeight\\(''\\);\
setGoldPerTon\\(''\\);\
setSilverPerTon\\(''\\);\
setHumidity\\(''\\);\
setCopperContent\\(''\\);\
setRefineryChargeRC\\(''\\);\
setRefineryChargeTC\\(''\\);\
setLmePercentage\\('96\\.25'\\); // Reset to default\
setGoldPayablePercentage\\('80'\\); // Reset to default\
setSilverPayablePercentage\\('80'\\); // Reset to default\
setUseCustomPrices\\(false\\); // Reset custom prices toggle\
setCustomCopperPrice\\(''\\);\
setCustomGoldPrice\\(''\\);\
setCustomSilverPrice\\(''\\);\
setDryMetricTon\\(0\\);\
setTotalGold\\(0\\);\
setTotalSilver\\(0\\);\
setTotalCopper\\(0\\);\
setTotalRefineryCharges\\(0\\);\
setEstimatedCopperValue\\(0\\);\
setEstimatedGoldValue\\(0\\);\
setEstimatedSilverValue\\(0\\);\
setTotalExportValue\\(0\\); // Clear Total Export Value\
\\\};\
// Function to generate Excel document\
const generateExcelDocument \\= \\(\\) \\=\\> \\\{\
setIsGeneratingExcel\\(true\\);\
if \\(typeof window\\.XLSX \\=\\=\\= 'undefined'\\) \\\{\
console\\.error\\("XLSX library is not loaded\\. Please wait a moment or refresh the page\\."\\);\
setIsGeneratingExcel\\(false\\);\
return;\
\\\}\
const data \\= \\[\
\\["Extratex Copper Dashboard \\- Calculation Summary"\\],\
\\[\\],\
\\["Date\\:", new Date\\(\\)\\.toLocaleDateString\\(\\)\\],\
\\[\\],\
\\["\\-\\-\\- Input Parameters \\-\\-\\-"\\],\
\\["Copper Ore Weight\\:", oreWeight, "tons"\\],\
\\["Gold Content\\:", goldPerTon, "g/ton"\\],\
\\["Silver Content\\:", silverPerTon, "g/ton"\\],\
\\["Humidity Content\\:", humidity, "%"\\],\
\\["Copper Content\\:", copperContent, "%"\\],\
\\["LME Selling Percentage\\:", lmePercentage, "%"\\],\
\\["Gold Payable Percentage\\:", goldPayablePercentage, "%"\\], // Added to Excel\
\\["Silver Payable Percentage\\:", silverPayablePercentage, "%"\\], // Added to Excel\
\\["Refinery Charge \\(RC\\)\\:", refineryChargeRC, "</span>/ton"],\
      ["Refinery Charge (TC):", refineryChargeTC, "<span class="math-inline">/ton"\\],\
\\[\\],\
\\["\\-\\-\\- Market Prices Used \\-\\-\\-"\\],\
\\["Live LME Copper Price\\:", liveLMECopperPrice\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "</span>/ton"],\
      ["Live LBMA Gold Price:", liveGoldPrice.toLocaleString(undefined, \{ minimumFractionDigits: 2, maximumFractionDigits: 2 \}), "<span class="math-inline">/troy oz"\\],\
\\["Live LBMA Silver Price\\:", liveSilverPrice\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "</span>/troy oz"],\
      ["Custom Prices Used:", useCustomPrices ? "Yes" : "No"],\
      ...(useCustomPrices ? [\
        ["Custom Copper Price:", customCopperPrice, "<span class="math-inline">/ton"\\],\
\\["Custom Gold Price\\:", customGoldPrice, "</span>/troy oz"],\
        ["Custom Silver Price:", customSilverPrice, "<span class="math-inline">/troy oz"\\],\
\\] \\: \\[\\]\\),\
\\[\\],\
\\["\\-\\-\\- Calculated Results \\-\\-\\-"\\],\
\\["Dry Metric Ton \\(DMT\\)\\:", dryMetricTon\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "tons"\\],\
\\["Total Gold Content\\:", totalGold\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "grams"\\],\
\\["Total Silver Content\\:", totalSilver\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "grams"\\],\
\\["Total Copper Content\\:", totalCopper\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "tons"\\],\
\\["Total Refinery Charges \\(RC \\+ TC\\)\\:", totalRefineryCharges\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "</span>"],\
      [],\
      ["--- Estimated Values ---"],\
      ["Estimated Copper Value:", estimatedCopperValue.toLocaleString(undefined, \{ minimumFractionDigits: 2, maximumFractionDigits: 2 \}), "<span class="math-inline">"\\],\
\\["Estimated Gold Value\\:", estimatedGoldValue\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "</span>"],\
      ["Estimated Silver Value:", estimatedSilverValue.toLocaleString(undefined, \{ minimumFractionDigits: 2, maximumFractionDigits: 2 \}), "<span class="math-inline">"\\],\
\\["Total Export Value\\:", totalExportValue\\.toLocaleString\\(undefined, \\\{ minimumFractionDigits\\: 2, maximumFractionDigits\\: 2 \\\}\\), "</span>"], // Added to Excel\
    ];\
\
    const ws = window.XLSX.utils.aoa_to_sheet(data);\
\
    // Optional: Add some basic styling for better appearance in Excel\
    // Set column widths\
    const colWidths = [\
      \{ wch: 30 \}, // Label column\
      \{ wch: 15 \}, // Value column\
      \{ wch: 10 \}  // Unit column\
    ];\
    ws['!cols'] = colWidths;\
\
    // Merge cells for the title\
    ws['!merges'] = [\{ s: \{ r: 0, c: 0 \}, e: \{ r: 0, c: 2 \} \}];\
    // Center the title\
    if (ws['A1']) \{\
      ws['A1'].s = \{ alignment: \{ horizontal: "center" \}, font: \{ bold: true, sz: 16 \} \};\
    \}\
\
\
    const wb = window.XLSX.utils.book_new();\
    window.XLSX.utils.book_append_sheet(wb, ws, "Copper_Ore_Summary");\
    window.XLSX.writeFile(wb, "Extratex_Copper_Summary.xlsx");\
\
    setIsGeneratingExcel(false);\
  \};\
\
\
  // Helper component for input fields\
  const InputField = (\{ label, value, onChange, placeholder, unit, disabled = false \}) => (\
    <div className="mb-4">\
      <label className="block text-gray-700 text-sm font-bold mb-2">\
        \{label\}\
      </label>\
      <div className=\{`flex items-center border rounded-lg shadow-sm $\{disabled ? 'bg-gray-100' : 'focus-within:ring-2 focus-within:ring-blue-500'\}`\}>\
        <input\
          type="number"\
          value=\{value\}\
          onChange=\{(e) => onChange(e.target.value)\}\
          placeholder=\{placeholder\}\
          className="shadow appearance-none border-none rounded-l-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline flex-grow"\
          disabled=\{disabled\}\
        />\
        \{unit && <span className="px-3 text-gray-500 bg-gray-100 rounded-r-lg border-l border-gray-200 py-2">\{unit\}</span>\}\
      </div>\
    </div>\
  );\
\
  // Helper component for displaying calculated results\
  const ResultDisplay = (\{ label, value, unit \}) => (\
    <div className="mb-2">\
      <p className="text-gray-700 text-base">\
        <span className="font-semibold">\{label\}:</span> \{value.toLocaleString(undefined, \{ minimumFractionDigits: 2, maximumFractionDigits: 2 \})\} \{unit\}\
      </p>\
    </div>\
  );\
\
  // Helper component for displaying live prices\
  const LivePriceDisplay = (\{ label, price, unit \}) => (\
    <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg shadow-sm border border-blue-100">\
      <span className="text-blue-800 font-semibold text-sm sm:text-base">\{label\}:</span>\
      <span className="text-blue-900 font-bold text-base sm:text-lg">\
        \{price.toLocaleString(undefined, \{ minimumFractionDigits: 2, maximumFractionDigits: 2 \})\} \{unit\}\
      </span>\
    </div>\
  );\
\
  return (\
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 p-4 sm:p-6 lg:p-8 font-inter flex items-center justify-center">\
      <div className="bg-white p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-4xl border border-gray-200">\
        <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-gray-800 mb-8 flex items-center justify-center">\
          \{/* Extratex Logo */\}\
          <img\
            src=\{`$\{process.env.PUBLIC_URL\}/Extratex Logo.png`\}\
            alt="Extratex Logo"\
            className="h-10 w-auto mr-3 inline-block"\
            onError=\{(e) => \{ e.target.onerror = null; e.target.src='[https://placehold.co/100x40/cccccc/333333?text=Logo](https://placehold.co/100x40/cccccc/333333?text=Logo)'; \}\} // Fallback\
          />\
          Extratex Copper Dashboard\
        </h1>\
\
        \{/* Live Market Prices Section */\}\
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">\
          <LivePriceDisplay label="Live LME Copper" price=\{liveLMECopperPrice\} unit="<span class="math-inline">/ton" /\\>\
<LivePriceDisplay label\\="Live LBMA Gold" price\\=\\\{liveGoldPrice\\\} unit\\="</span>/troy oz" />\
          <LivePriceDisplay label="Live LBMA Silver" price=\{liveSilverPrice\} unit="<span class="math-inline">/troy oz" /\\>\
</div\\>\
<div className\\="grid grid\\-cols\\-1 md\\:grid\\-cols\\-2 gap\\-6 mb\\-8"\\>\
\\\{/\\* Input Section \\*/\\\}\
<div className\\="bg\\-gray\\-50 p\\-6 rounded\\-lg shadow\\-inner border border\\-gray\\-100"\\>\
<h2 className\\="text\\-2xl font\\-bold text\\-gray\\-700 mb\\-6"\\>Input Parameters</h2\\>\
<InputField\
label\\="Copper Ore Weight"\
value\\=\\\{oreWeight\\\}\
onChange\\=\\\{setOreWeight\\\}\
placeholder\\="e\\.g\\., 1000"\
unit\\="tons"\
/\\>\
<InputField\
label\\="Gold Content"\
value\\=\\\{goldPerTon\\\}\
onChange\\=\\\{setGoldPerTon\\\}\
placeholder\\="e\\.g\\., 0\\.5"\
unit\\="g/ton"\
/\\>\
<InputField\
label\\="Silver Content"\
value\\=\\\{silverPerTon\\\}\
onChange\\=\\\{setSilverPerTon\\\}\
placeholder\\="e\\.g\\., 10"\
unit\\="g/ton"\
/\\>\
<InputField\
label\\="Humidity Content"\
value\\=\\\{humidity\\\}\
onChange\\=\\\{setHumidity\\\}\
placeholder\\="e\\.g\\., 8"\
unit\\="%"\
/\\>\
<InputField\
label\\="Copper Content"\
value\\=\\\{copperContent\\\}\
onChange\\=\\\{setCopperContent\\\}\
placeholder\\="e\\.g\\., 25"\
unit\\="%"\
/\\>\
<InputField\
label\\="LME Selling Percentage"\
value\\=\\\{lmePercentage\\\}\
onChange\\=\\\{setLmePercentage\\\}\
placeholder\\="e\\.g\\., 96\\.25"\
unit\\="%"\
/\\>\
<InputField\
label\\="Gold Payable Percentage" // New Input Field\
value\\=\\\{goldPayablePercentage\\\}\
onChange\\=\\\{setGoldPayablePercentage\\\}\
placeholder\\="e\\.g\\., 80"\
unit\\="%"\
/\\>\
<InputField\
label\\="Silver Payable Percentage" // New Input Field\
value\\=\\\{silverPayablePercentage\\\}\
onChange\\=\\\{setSilverPayablePercentage\\\}\
placeholder\\="e\\.g\\., 80"\
unit\\="%"\
/\\>\
<InputField\
label\\="Refinery Charge \\(RC\\)"\
value\\=\\\{refineryChargeRC\\\}\
onChange\\=\\\{setRefineryChargeRC\\\}\
placeholder\\="e\\.g\\., 50"\
unit\\="</span>/ton"\
            />\
            <InputField\
              label="Refinery Charge (TC)"\
              value=\{refineryChargeTC\}\
              onChange=\{setRefineryChargeTC\}\
              placeholder="e.g., 150"\
              unit="<span class="math-inline">/ton"\
/\\>\
\\\{/\\* Custom Prices Toggle \\*/\\\}\
<div className\\="mb\\-4 flex items\\-center mt\\-6"\\>\
<input\
type\\="checkbox"\
id\\="useCustomPrices"\
checked\\=\\\{useCustomPrices\\\}\
onChange\\=\\\{\\(e\\) \\=\\> setUseCustomPrices\\(e\\.target\\.checked\\)\\\}\
className\\="mr\\-2 h\\-4 w\\-4 text\\-blue\\-600 focus\\:ring\\-blue\\-500 border\\-gray\\-300 rounded"\
/\\>\
<label htmlFor\\="useCustomPrices" className\\="text\\-gray\\-700 text\\-sm font\\-bold"\\>\
Use Custom Prices\
</label\\>\
</div\\>\
\\\{/\\* Custom Price Input Fields \\(conditionally rendered\\) \\*/\\\}\
\\\{useCustomPrices && \\(\
<div className\\="bg\\-gray\\-100 p\\-4 rounded\\-lg shadow\\-inner border border\\-gray\\-200 mt\\-4"\\>\
<h3 className\\="text\\-lg font\\-semibold text\\-gray\\-700 mb\\-4"\\>Your Custom Prices</h3\\>\
<InputField\
label\\="Custom Copper Price"\
value\\=\\\{customCopperPrice\\\}\
onChange\\=\\\{setCustomCopperPrice\\\}\
placeholder\\="e\\.g\\., 9700"\
unit\\="</span>/ton"\
                />\
                <InputField\
                  label="Custom Gold Price"\
                  value=\{customGoldPrice\}\
                  onChange=\{setCustomGoldPrice\}\
                  placeholder="e.g., 2300"\
                  unit="<span class="math-inline">/troy oz"\
/\\>\
<InputField\
label\\="Custom Silver Price"\
value\\=\\\{customSilverPrice\\\}\
onChange\\=\\\{setCustomSilverPrice\\\}\
placeholder\\="e\\.g\\., 28"\
unit\\="</span>/troy oz"\
                />\
              </div>\
            )\}\
\
            <button\
              onClick=\{handleClear\}\
              className="mt-6 w-full bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-400"\
            >\
              Clear All\
            </button>\
          </div>\
\
          \{/* Results Section */\}\
          <div className="bg-blue-50 p-6 rounded-lg shadow-inner border border-blue-100 flex flex-col justify-between">\
            <div>\
              <h2 className="text-2xl font-bold text-blue-700 mb-6">Calculated Results</h2>\
              <ResultDisplay label="Dry Metric Ton (DMT)" value=\{dryMetricTon\} unit="tons" />\
              <ResultDisplay label="Total Gold Content" value=\{totalGold\} unit="grams" />\
              <ResultDisplay label="Total Silver Content" value=\{totalSilver\} unit="grams" />\
              <ResultDisplay label="Total Copper Content" value=\{totalCopper\} unit="tons" />\
              <ResultDisplay label="Total Refinery Charges (RC + TC)" value=\{totalRefineryCharges\} unit="<span class="math-inline">" /\\>\
<hr className\\="my\\-4 border\\-blue\\-200" /\\>\
<h3 className\\="text\\-xl font\\-bold text\\-blue\\-700 mb\\-4"\\>Estimated Values</h3\\>\
<ResultDisplay label\\="Estimated Copper Value" value\\=\\\{estimatedCopperValue\\\} unit\\="</span>" />\
              <ResultDisplay label="Estimated Gold Value" value=\{estimatedGoldValue\} unit="<span class="math-inline">" /\\>\
<ResultDisplay label\\="Estimated Silver Value" value\\=\\\{estimatedSilverValue\\\} unit\\="</span>" />\
              <hr className="my-4 border-blue-200" /> \{/* Separator for total export value */\}\
              <ResultDisplay label="Total Export Value" value=\{totalExportValue\} unit="$" /> \{/* Display Total Export Value */\}\
\
              \{/* Excel Document Button */\}\
              <button\
                onClick=\{generateExcelDocument\}\
                className="mt-4 w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-400 flex items-center justify-center"\
                disabled=\{isGeneratingExcel\}\
              >\
                \{isGeneratingExcel ? (\
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)" fill="none" viewBox="0 0 24 24">\
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>\
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\
                  </svg>\
                ) : (\
                  '\uc0\u55357 \u56522  Generate Excel Document \u55357 \u56522 '\
                )\}\
              </button>\
\
            </div>\
            <div className="mt-8 p-4 bg-yellow-50 rounded-lg border border-yellow-100 text-yellow-800">\
              <p className="font-semibold mb-2">How calculations are made:</p>\
              <ul className="list-disc list-inside text-sm">\
                <li><span className="font-medium">Dry Metric Ton (DMT):</span> Ore Weight <span class="math-inline">\\\\times</span> (1 - Humidity / 100)</li>\
                <li><span className="font-medium">Total Gold/Silver:</span> DMT <span class="math-inline">\\\\times</span> Content (g/ton)</li>\
                <li><span className="font-medium">Total Copper:</span> DMT <span class="math-inline">\\\\times</span> Copper Content (%) / 100</li>\
                <li><span className="font-medium">Total Refinery Charges:</span> DMT <span class="math-inline">\\\\times</span> (RC + TC)</li>\
                <li><span className="font-medium">Estimated Copper Value:</span> Total Copper (tons) <span class="math-inline">\\\\times</span> Current Copper Price <span class="math-inline">\\\\times</span> (LME Percentage / 100)</li>\
                <li><span className="font-medium">Estimated Gold Value:</span> Total Gold (grams) <span class="math-inline">\\\\times</span> (1 troy oz / 31.1035 grams) <span class="math-inline">\\\\times</span> Current Gold Price <span class="math-inline">\\\\times</span> (Gold Payable Percentage / 100)</li>\
                <li><span className="font-medium">Estimated Silver Value:</span> Total Silver (grams) <span class="math-inline">\\\\times</span> (1 troy oz / 31.1035 grams) <span class="math-inline">\\\\times</span> Current Silver Price <span class="math-inline">\\\\times</span> (Silver Payable Percentage / 100)</li>\
                <li><span className="font-medium">Total Export Value:</span> Estimated Copper Value + Estimated Gold Value + Estimated Silver Value</li>\
              </ul>\
            </div>\
          </div>\
        </div>\
      </div>\
    </div>\
  );\
\}\
\
export default App;}